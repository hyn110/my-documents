  	docker 客户端是用户与docker 服务交互的一个程序 , 用户通过 docker 命令向 docker 服务发起请求并接收响应 . 它跟Linux的shell终端类似
	
	docker daemon , 也可以称只为 Docker 服务 , 也就是我们前面提到的Docker 引擎 . 它是驱动整个Docker功能实现的核心 . 镜像的构建和储存 , 容器的创建和管理等 , 都是由 dokcer 引擎来实现的

	Docker 容器 : 功能和概念上 , Docker 容器是一个核心内容 , 相对于传统的虚拟机 , 它作为一项基础技术在性能上给dokcer带来了极大的优势 . 从内容上讲 , docker 利用容器来运行和隔离应用 , Docker 容器类似于一个轻量级的沙箱 , 它的内部包含了一个简易版的Linux系统环境以及运行在其中的应用程序 .
	从概念上讲 , 容器很好的诠释了Docker集装箱的概念 , 集装箱可以存放任何货物 , 并通过游轮运输到世界各地 . 而负责运输的游轮和装载卸载的码头都不用关系集装箱里的货物 , 这是一种标准化的集装和运输方式. 类似的 , docker 容器就是 软件界的集装箱 , 它可以安装任意的软件和库文件 , 做任意的运行环境配置 . 开发人员和运维人员在转移和部署应用的时候 , 不用关心容器里装了什么软件 , 也不用了解它们是如何配置的 . 而管理容器的 Docker 引擎同样不用关系容器里的内容 , 它只需要把容器运行起来就可以 , 就像码头工人管把集装箱装上货船就行. Docker 被称为 "软件界的创建和革命" 就是因为 它对容器进行了封装 ,并与集装箱的概念对应起来, 改变了软件的开发和部署形态 , 降低了成本 提高了效率.
	举个例子 , 假设我们在本地服务器构建了一个基于(Linux + tomcat + mysql)网站,但是有一天 , 我们需要将网站发布到云服务器上,比如阿里云服务器,这个时候我们就需要现在阿里云服务器上先去配置 tomcat 和 mysql , 网站发布前我们还得进行测试 . 但是如果通过通过docker 容器来打包就完全问题,我们只需要把docker容器转移到云端服务器并运行起来就可以了,因为容器已经包含了我们网站运行所需要的所有环境.
	
	Docker 镜像 : docker镜像类似于虚拟机镜像,可以将它理解为一个只读文件模版 .例如 ,一个镜像可以包含一个基本的操作系统环境 ,里面仅安装了Tomcat应用程序 ,我们就可以将它成为一个 tomcat 镜像.但是Docker镜像相对于传统的虚拟机镜像要轻量化很多,它只是一个可定制的根文件系统 .Docker镜像的另一个创新是的它是层级的,并且是可复用的 , 这样能够极大的减少磁盘和内存的开销 .

	Docker 仓库 : 仓库是存储镜像的地方 , docker仓库的存在极大的方便了我们传输镜像 . 我们只需要把镜像传输到云端仓库 , 那么只要在有网络的地方就能将镜像下载到本地. 而 docker 提供了统一的 docker命令 , 使用户可以方便的实现镜像的上传和下载.Docker 公司提供的官方仓库角 Docker Hub , 上面提供了大多数常用的软件和发行版的官方镜像 , 还有无数个人用户提供的个人镜像 , 它就像是 软件界的 github